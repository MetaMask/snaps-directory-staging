{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-7299d3862a28607cf5f1.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/layout/dist/chunk-W7WUSNWJ.mjs"],"sourcesContent":["import {\n  Box,\n  Container,\n  Divider,\n  Flex,\n  Heading,\n  Link,\n  Tag,\n  Text,\n} from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { useLingui } from '@lingui/react';\nimport { graphql, Link as GatsbyLink } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport {\n  SnapAuthorship,\n  SnapData,\n  InstallSnapButton,\n  SnapSourceCode,\n  SnapAudits,\n  SnapCategory,\n  SnapDescription,\n  SnapWebsiteButton,\n} from '../../../components';\nimport { ExternalLink } from '../../../components/ExternalLink';\nimport {\n  SNAP_CATEGORY_LINKS,\n  type RegistrySnapCategory,\n} from '../../../constants';\nimport { FilteredSnaps, useGetInstalledSnapsQuery } from '../../../features';\nimport { Order } from '../../../features/filter/constants';\nimport { NotificationAcknowledger } from '../../../features/notifications/components';\nimport { getLinkText, type Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const i18n = useLingui();\n\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    category,\n  } = data.snap;\n\n  const { data: installedSnaps } = useGetInstalledSnapsQuery();\n  const isInstalled = Boolean(installedSnaps?.[snapId]);\n\n  return (\n    <Box position=\"relative\">\n      <Box\n        position=\"absolute\"\n        top=\"-50%\"\n        width=\"100%\"\n        height=\"75%\"\n        sx={{\n          background: `url(\"${icon}\") no-repeat center center`,\n          backgroundSize: 'cover',\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.25',\n        }}\n      />\n      <Container\n        maxWidth=\"container.xl\"\n        paddingTop=\"0\"\n        marginTop={{ base: 4, md: 20 }}\n      >\n        <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n        <Box>\n          <Flex\n            justifyContent=\"space-between\"\n            flexDirection={{ base: 'column', md: 'row' }}\n            alignItems=\"center\"\n          >\n            <SnapAuthorship name={name} icon={icon} snapId={snapId} />\n            <Flex\n              alignItems=\"center\"\n              flexDirection={{ base: 'column', md: 'row' }}\n              marginTop={{ base: 4, md: 0 }}\n              width={{ base: '100%', md: 'auto' }}\n              gap={{ base: 4, md: 4 }}\n            >\n              {!onboard && (\n                <InstallSnapButton\n                  snapId={snapId}\n                  name={name}\n                  icon={icon}\n                  website={website}\n                  version={latestVersion}\n                />\n              )}\n              {(isInstalled || onboard) && website && (\n                <SnapWebsiteButton snapId={snapId} website={website} />\n              )}\n            </Flex>\n          </Flex>\n          <Divider marginY=\"6\" />\n          <Flex\n            justifyContent={{ base: 'center', md: 'space-between' }}\n            flexDirection={{ base: 'column', md: 'row' }}\n            flexWrap={{ base: 'nowrap', md: 'wrap', lg: 'nowrap' }}\n            rowGap={{ base: 4, lg: 0 }}\n            marginBottom=\"12\"\n          >\n            {data.snap.category && (\n              <SnapData\n                order={{ base: 1, md: 1 }}\n                label={t`Category`}\n                value={\n                  <SnapCategory\n                    category={data.snap.category as RegistrySnapCategory}\n                  />\n                }\n              />\n            )}\n            <SnapData\n              order={{ base: 8, md: 2 }}\n              label={t`Identifier`}\n              value={\n                <Box>\n                  <Tag variant=\"muted\" textTransform=\"none\">\n                    <ExternalLink href={website} color=\"inherit\">\n                      {snapId.replace(/^npm:/u, '')}\n                    </ExternalLink>\n                  </Tag>\n                </Box>\n              }\n            />\n            {data.snap.author && (\n              <SnapData\n                order={{ base: 2, md: 3 }}\n                label={t`Developer`}\n                value={\n                  <ExternalLink href={data.snap.author.website}>\n                    {data.snap.author.name}\n                  </ExternalLink>\n                }\n              />\n            )}\n            {\n              // An empty Box taking full width will divide elements in two rows\n              // only on medium size screens while keeping the full flex\n              // system for every screen.\n            }\n            <Box\n              order={{ base: 1, md: 4 }}\n              display={{ base: 'none', md: 'flex', lg: 'none' }}\n              flexBasis=\"100%\"\n              height={0}\n            />\n            {\n              // On mobile screens description is displayed in the middle\n              // of the Snap's metadata\n            }\n            <Text\n              display={{ base: 'block', md: 'none' }}\n              order={{ base: 5, md: 6 }}\n              color=\"text.alternative\"\n              textTransform=\"uppercase\"\n              fontWeight=\"medium\"\n              fontSize=\"sm\"\n            >\n              <Trans>\n                Description by{' '}\n                <Text\n                  as=\"span\"\n                  color=\"text.default\"\n                  textTransform=\"uppercase\"\n                  fontWeight=\"medium\"\n                  fontSize=\"sm\"\n                >\n                  {name}\n                </Text>\n              </Trans>\n            </Text>\n            <SnapDescription\n              order={{ base: 6, md: 7 }}\n              description={description}\n              mt=\"1\"\n              whiteSpace=\"pre-wrap\"\n              display={{ base: 'block', md: 'none' }}\n            />\n            {data.snap.sourceCode && (\n              <SnapData\n                order={{ base: 9, md: 9 }}\n                label={t`Source Code`}\n                value={<SnapSourceCode url={data.snap.sourceCode} />}\n              />\n            )}\n            {data.snap.audits && (\n              <SnapData\n                order={{ base: 10, md: 10 }}\n                label={t`Audit`}\n                value={\n                  <SnapAudits\n                    audits={\n                      data.snap.audits as Fields<\n                        Queries.SnapAudits,\n                        'auditor' | 'report'\n                      >[]\n                    }\n                  />\n                }\n              />\n            )}\n            {(data.snap.support?.contact ||\n              data.snap.support?.faq ||\n              data.snap.support?.knowledgeBase) && (\n              <SnapData\n                order={{ base: 3, md: 11 }}\n                label={t`Support`}\n                value={\n                  <>\n                    {data.snap.support.contact && (\n                      <ExternalLink href={data.snap.support.contact}>\n                        {getLinkText(data.snap.support.contact, t`Contact`)}\n                      </ExternalLink>\n                    )}\n                    {data.snap.support.faq && (\n                      <ExternalLink href={data.snap.support.faq}>\n                        <Trans>FAQ</Trans>\n                      </ExternalLink>\n                    )}\n                    {data.snap.support.knowledgeBase && (\n                      <ExternalLink href={data.snap.support.knowledgeBase}>\n                        <Trans>Knowledge Base</Trans>\n                      </ExternalLink>\n                    )}\n                  </>\n                }\n              />\n            )}\n          </Flex>\n          <Text\n            display={{ base: 'none', md: 'block' }}\n            color=\"text.alternative\"\n            textTransform=\"uppercase\"\n            fontWeight=\"medium\"\n            fontSize=\"sm\"\n          >\n            <Trans>\n              Description by{' '}\n              <Text\n                as=\"span\"\n                color=\"text.default\"\n                textTransform=\"uppercase\"\n                fontWeight=\"medium\"\n                fontSize=\"sm\"\n              >\n                {name}\n              </Text>\n            </Trans>\n          </Text>\n          <SnapDescription\n            display={{ base: 'none', md: 'block' }}\n            description={description}\n            marginTop=\"2\"\n            whiteSpace=\"pre-wrap\"\n          />\n        </Box>\n\n        {category && (\n          <>\n            <Divider my=\"12\" />\n            <Flex\n              width=\"100%\"\n              marginBottom=\"4\"\n              flexDirection=\"row\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Heading as=\"h2\" fontSize=\"2xl\">\n                <Trans>Related Snaps</Trans>\n              </Heading>\n              <Link\n                as={GatsbyLink}\n                to={SNAP_CATEGORY_LINKS[category as RegistrySnapCategory].link}\n                variant=\"landing\"\n              >\n                {i18n._(\n                  SNAP_CATEGORY_LINKS[category as RegistrySnapCategory]\n                    .linkText,\n                )}\n              </Link>\n            </Flex>\n            <FilteredSnaps\n              limit={3}\n              category={category as RegistrySnapCategory}\n              order={Order.Random}\n              excluded={[snapId]}\n              images={true}\n            />\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n","'use client'\n\n// src/divider.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Divider = forwardRef(function Divider2(props, ref) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props);\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props);\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\"\n    },\n    horizontal: {\n      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\"\n    }\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.hr,\n    {\n      ref,\n      \"aria-orientation\": orientation,\n      ...rest,\n      __css: {\n        ...styles,\n        border: \"0\",\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css\n      },\n      className: cx(\"chakra-divider\", className)\n    }\n  );\n});\nDivider.displayName = \"Divider\";\n\nexport {\n  Divider\n};\n//# sourceMappingURL=chunk-W7WUSNWJ.mjs.map"],"names":["Head","_ref2","data","title","snap","name","description","image","site","siteMetadata","siteUrl","banner","publicURL","_jsxs","_Fragment","children","_jsx","lang","content","property","author","_ref","_data$snap$support","_data$snap$support2","_data$snap$support3","i18n","useLingui","snapId","icon","website","onboard","latestVersion","category","installedSnaps","useGetInstalledSnapsQuery","isInstalled","Boolean","Box","position","top","width","height","sx","background","backgroundSize","filter","opacity","Container","maxWidth","paddingTop","marginTop","base","md","NotificationAcknowledger","version","Flex","justifyContent","flexDirection","alignItems","SnapAuthorship","gap","InstallSnapButton","SnapWebsiteButton","Divider","marginY","flexWrap","lg","rowGap","marginBottom","SnapData","order","label","_","id","value","SnapCategory","Tag","variant","textTransform","ExternalLink","href","color","replace","display","flexBasis","Text","fontWeight","fontSize","Trans","values","components","as","SnapDescription","mt","whiteSpace","sourceCode","SnapSourceCode","url","audits","SnapAudits","support","contact","faq","knowledgeBase","getLinkText","my","Heading","Link","GatsbyLink","to","SNAP_CATEGORY_LINKS","link","linkText","FilteredSnaps","limit","Order","Random","excluded","images","props","ref","borderLeftWidth","borderBottomWidth","borderTopWidth","borderRightWidth","borderWidth","borderStyle","borderColor","styles","className","orientation","__css","rest","dividerStyles","vertical","horizontal","jsx","hr","border","cx","displayName"],"sourceRoot":""}