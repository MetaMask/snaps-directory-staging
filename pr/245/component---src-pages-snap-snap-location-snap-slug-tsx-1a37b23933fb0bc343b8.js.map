{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-1a37b23933fb0bc343b8.js","mappings":"kWAuDA,MA2QaA,EAAqCC,IAAc,IAAb,KAAEC,GAAMD,EACzD,MAAME,EAAWD,EAAKE,KAAKC,KAAI,mCACzBC,EAAc,uCAAuCJ,EAAKE,KAAKC,KAAI,IACnEE,EAAQ,GAAGL,EAAKM,KAAKC,aAAaC,QAAUR,EAAKE,KAAKO,OAAOC,UAEnE,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAMC,KAAK,QACXD,EAAAA,EAAAA,KAAA,SAAAD,SAAQZ,KACRa,EAAAA,EAAAA,KAAA,QAAMX,KAAK,cAAca,QAASZ,KAClCU,EAAAA,EAAAA,KAAA,QAAMG,SAAS,WAAWD,QAAShB,EAAKE,KAAKC,QAC7CW,EAAAA,EAAAA,KAAA,QAAMG,SAAS,eAAeD,QAAShB,EAAKM,KAAKC,aAAaN,SAC9Da,EAAAA,EAAAA,KAAA,QAAMG,SAAS,iBAAiBD,QAASZ,KACzCU,EAAAA,EAAAA,KAAA,QAAMG,SAAS,UAAUD,QAAQ,aACjCF,EAAAA,EAAAA,KAAA,QAAMX,KAAK,WAAWa,QAASX,KAC/BS,EAAAA,EAAAA,KAAA,QAAMX,KAAK,iBAAiBa,QAAQ,UACpCF,EAAAA,EAAAA,KAAA,QAAMX,KAAK,kBAAkBa,QAAQ,SACrCF,EAAAA,EAAAA,KAAA,QAAMX,KAAK,eAAea,QAAQ,yBAClCF,EAAAA,EAAAA,KAAA,QAAMX,KAAK,kBAAkBa,QAAShB,EAAKM,KAAKC,aAAaW,UAC7DJ,EAAAA,EAAAA,KAAA,QAAMX,KAAK,gBAAgBa,QAAShB,EAAKE,KAAKC,QAC9CW,EAAAA,EAAAA,KAAA,QAAMX,KAAK,sBAAsBa,QAASZ,KAC1CU,EAAAA,EAAAA,KAAA,QAAMX,KAAK,gBAAgBa,QAASX,MACnC,EAgDP,UAjVmDc,IAAc,IAAAC,EAAAC,EAAAC,EAAA,IAAb,KAAEtB,GAAMmB,EAC1D,MAAMI,GAAOC,EAAAA,EAAAA,OAEP,KACJrB,EAAI,OACJsB,EAAM,KACNC,EAAI,QACJC,EAAO,QACPC,EAAO,YACPxB,EAAW,cACXyB,EAAa,SACbC,GACE9B,EAAKE,KAET,OACES,EAAAA,EAAAA,MAACoB,EAAAA,EAAS,CACRC,SAAS,eACTC,WAAW,IACXC,UAAW,CAAEC,KAAM,EAAGC,GAAI,IAAKvB,SAAA,EAE/BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAwB,CAACZ,OAAQA,EAAQa,QAAST,KACnDlB,EAAAA,EAAAA,MAAC4B,EAAAA,GAAG,CAAA1B,SAAA,EACFF,EAAAA,EAAAA,MAAC6B,EAAAA,EAAI,CACHC,eAAe,gBACfC,cAAe,CAAEP,KAAM,SAAUC,GAAI,OACrCO,WAAW,SAAQ9B,SAAA,EAEnBC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAc,CAACzC,KAAMA,EAAMuB,KAAMA,EAAMD,OAAQA,KAChDd,EAAAA,EAAAA,MAAC6B,EAAAA,EAAI,CACHG,WAAW,SACXD,cAAe,CAAEP,KAAM,SAAUC,GAAI,OACrCF,UAAW,CAAEC,KAAM,EAAGC,GAAI,GAC1BS,MAAO,CAAEV,KAAM,OAAQC,GAAI,QAC3BU,IAAK,CAAEX,KAAM,EAAGC,GAAI,GAAIvB,SAAA,CAEvBc,IACCb,EAAAA,EAAAA,KAACiC,EAAAA,GAAiB,CAChBtB,OAAQA,EACRE,QAASA,EACTC,QAASA,KAGXA,IACAd,EAAAA,EAAAA,KAACkC,EAAAA,GAAiB,CAChBvB,OAAQA,EACRtB,KAAMA,EACNuB,KAAMA,EACNC,QAASA,EACTW,QAAST,WAKjBf,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CAACC,GAAG,OACZvC,EAAAA,EAAAA,MAAC6B,EAAAA,EAAI,CACHC,eAAgB,CAAEN,KAAM,SAAUC,GAAI,iBACtCM,cAAe,CAAEP,KAAM,SAAUC,GAAI,OACrCe,SAAU,CAAEhB,KAAM,SAAUC,GAAI,OAAQgB,GAAI,UAC5CC,OAAQ,CAAElB,KAAM,EAAGiB,GAAI,GAAIvC,SAAA,CAE1Bb,EAAKE,KAAK4B,WACThB,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CACPC,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtBoB,MAAKjC,EAAAkC,EAAE,CAAAC,GAAA,WACPC,OACE7C,EAAAA,EAAAA,KAAC8C,EAAAA,GAAY,CACX9B,SAAU9B,EAAKE,KAAK4B,cAK5BhB,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CACPC,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtBoB,MAAKjC,EAAAkC,EAAE,CAAAC,GAAA,WACPC,MAAO9B,IAER7B,EAAKE,KAAKgB,SACTJ,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CACPC,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtBoB,MAAKjC,EAAAkC,EAAE,CAAAC,GAAA,WACPC,OACE7C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAY,CAACC,KAAM9D,EAAKE,KAAKgB,OAAOS,QAAQd,SAC1Cb,EAAKE,KAAKgB,OAAOf,UAU1BW,EAAAA,EAAAA,KAACyB,EAAAA,GAAG,CACFgB,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtB2B,QAAS,CAAE5B,KAAM,OAAQC,GAAI,OAAQgB,GAAI,QACzCY,UAAU,OACVC,OAAQ,KAMVnD,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CACNC,GAAG,IACHa,QAAS,CAAE5B,KAAM,OAAQC,GAAI,QAC7BmB,MAAO,CAAEpB,KAAM,EAAGC,GAAI,MAExBtB,EAAAA,EAAAA,KAACoD,EAAAA,EAAI,CACHH,QAAS,CAAE5B,KAAM,QAASC,GAAI,QAC9BmB,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtB+B,MAAM,mBACNC,cAAc,YACdC,WAAW,SACXC,SAAS,KAAIzD,UAEbC,EAAAA,EAAAA,KAAAyD,EAAAA,GAAA,CAAAb,GAAA,SAAAc,OAAA,CAAArE,KASKA,GAAIsE,WAAA,IAPP3D,EAAAA,EAAAA,KAACoD,EAAAA,EAAI,CACHQ,GAAG,OACHP,MAAM,eACNC,cAAc,YACdC,WAAW,SACXC,SAAS,aAMfxD,EAAAA,EAAAA,KAAC6D,EAAAA,GAAe,CACdpB,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtBhC,YAAaA,EACbwE,GAAG,IACHC,WAAW,WACXd,QAAS,CAAE5B,KAAM,QAASC,GAAI,WAEhCtB,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CACNC,GAAG,IACHa,QAAS,CAAE5B,KAAM,OAAQC,GAAI,QAC7BmB,MAAO,CAAEpB,KAAM,EAAGC,GAAI,KAEvBpC,EAAKE,KAAK4E,aACThE,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CACPC,MAAO,CAAEpB,KAAM,EAAGC,GAAI,GACtBoB,MAAKjC,EAAAkC,EAAE,CAAAC,GAAA,WACPC,OAAO7C,EAAAA,EAAAA,KAACiE,EAAAA,GAAc,CAACC,IAAKhF,EAAKE,KAAK4E,eAGzC9E,EAAKE,KAAK+E,SACTnE,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CACPC,MAAO,CAAEpB,KAAM,GAAIC,GAAI,IACvBoB,MAAKjC,EAAAkC,EAAE,CAAAC,GAAA,WACPC,OACE7C,EAAAA,EAAAA,KAACoE,EAAAA,GAAU,CACTD,OACEjF,EAAKE,KAAK+E,aASD,QAAjB7D,EAAApB,EAAKE,KAAKiF,eAAO,IAAA/D,OAAA,EAAjBA,EAAmBgE,WACF,QADS/D,EAC1BrB,EAAKE,KAAKiF,eAAO,IAAA9D,OAAA,EAAjBA,EAAmBgE,OACF,QADK/D,EACtBtB,EAAKE,KAAKiF,eAAO,IAAA7D,OAAA,EAAjBA,EAAmBgE,kBACnBxE,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CACPC,MAAO,CAAEpB,KAAM,EAAGC,GAAI,IACtBoB,MAAKjC,EAAAkC,EAAE,CAAAC,GAAA,WACPC,OACEhD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGb,EAAKE,KAAKiF,QAAQC,UACjBtE,EAAAA,EAAAA,KAAC+C,EAAAA,EAAY,CAACC,KAAM9D,EAAKE,KAAKiF,QAAQC,QAAQvE,UAC3C0E,EAAAA,EAAAA,GAAYvF,EAAKE,KAAKiF,QAAQC,QAAO7D,EAAAkC,EAAE,CAAAC,GAAA,cAG3C1D,EAAKE,KAAKiF,QAAQE,MACjBvE,EAAAA,EAAAA,KAAC+C,EAAAA,EAAY,CAACC,KAAM9D,EAAKE,KAAKiF,QAAQE,IAAIxE,UACxCC,EAAAA,EAAAA,KAAAyD,EAAAA,GAAA,CAAAb,GAAA,aAGH1D,EAAKE,KAAKiF,QAAQG,gBACjBxE,EAAAA,EAAAA,KAAC+C,EAAAA,EAAY,CAACC,KAAM9D,EAAKE,KAAKiF,QAAQG,cAAczE,UAClDC,EAAAA,EAAAA,KAAAyD,EAAAA,GAAA,CAAAb,GAAA,sBAQd5C,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CAACC,GAAG,IAAIa,QAAS,CAAE5B,KAAM,OAAQC,GAAI,WAC7CtB,EAAAA,EAAAA,KAACoD,EAAAA,EAAI,CACHH,QAAS,CAAE5B,KAAM,OAAQC,GAAI,SAC7B+B,MAAM,mBACNC,cAAc,YACdC,WAAW,SACXC,SAAS,KAAIzD,UAEbC,EAAAA,EAAAA,KAAAyD,EAAAA,GAAA,CAAAb,GAAA,SAAAc,OAAA,CAAArE,KASKA,GAAIsE,WAAA,IAPP3D,EAAAA,EAAAA,KAACoD,EAAAA,EAAI,CACHQ,GAAG,OACHP,MAAM,eACNC,cAAc,YACdC,WAAW,SACXC,SAAS,aAMfxD,EAAAA,EAAAA,KAAC6D,EAAAA,GAAe,CACdZ,QAAS,CAAE5B,KAAM,OAAQC,GAAI,SAC7BhC,YAAaA,EACb8B,UAAU,IACV2C,WAAW,gBAId/C,IACCnB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CAACC,GAAG,QACZvC,EAAAA,EAAAA,MAAC6B,EAAAA,EAAI,CACHK,MAAM,OACN2C,aAAa,IACb9C,cAAc,MACdD,eAAe,gBACfE,WAAW,SAAQ9B,SAAA,EAEnBC,EAAAA,EAAAA,KAAC2E,EAAAA,EAAO,CAACf,GAAG,KAAKJ,SAAS,MAAKzD,UAC7BC,EAAAA,EAAAA,KAAAyD,EAAAA,GAAA,CAAAb,GAAA,cAEF5C,EAAAA,EAAAA,KAAC4E,EAAAA,EAAI,CACHhB,GAAIiB,EAAAA,KACJC,GAAIC,EAAAA,GAAoB/D,GAAkCgE,KAC1DC,QAAQ,UAASlF,SAEhBU,EAAKkC,EACJoC,EAAAA,GAAoB/D,GAAkCkE,gBAI5DlF,EAAAA,EAAAA,KAACmF,EAAAA,GAAa,CACZC,MAAO,EACPpE,SAAUA,EACVyB,MAAO4C,EAAAA,GAAMC,OACbC,SAAU,CAAC5E,GACX6E,QAAQ,SAIJ,C,uHCxSZrD,GAAU,QAAW,SAAkBsD,EAAOC,GAChD,MAAM,gBACJC,EAAe,kBACfC,EAAiB,eACjBC,EAAc,iBACdC,EAAgB,YAChBC,EAAW,YACXC,EAAW,YACXC,KACGC,IACD,QAAe,UAAWT,IACxB,UACJU,EAAS,YACTC,EAAc,aAAY,MAC1BC,KACGC,IACD,QAAiBb,GACfc,EAAgB,CACpBC,SAAU,CACRb,gBAAiBA,GAAmBG,GAAoBC,GAAe,MACvE5C,OAAQ,QAEVsD,WAAY,CACVb,kBAAmBA,GAAqBC,GAAkBE,GAAe,MACzEhE,MAAO,SAGX,OAAuB,IAAA2E,KACrB,IAAOC,GACP,CACEjB,MACA,mBAAoBU,KACjBE,EACHD,MAAO,IACFH,EACHU,OAAQ,IACRX,cACAD,iBACGO,EAAcH,MACdC,GAELF,WAAW,IAAAU,IAAG,iBAAkBV,IAGtC,IACAhE,EAAQ2E,YAAc,S","sources":["webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/layout/dist/chunk-W7WUSNWJ.mjs"],"sourcesContent":["import {\n  Box,\n  Container,\n  Divider,\n  Flex,\n  Heading,\n  Link,\n  Text,\n} from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { useLingui } from '@lingui/react';\nimport { graphql, Link as GatsbyLink } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport {\n  SnapAuthorship,\n  SnapData,\n  InstallSnapButton,\n  SnapSourceCode,\n  SnapAudits,\n  SnapCategory,\n  SnapDescription,\n  SnapWebsiteButton,\n} from '../../../components';\nimport { ExternalLink } from '../../../components/ExternalLink';\nimport {\n  SNAP_CATEGORY_LINKS,\n  type RegistrySnapCategory,\n} from '../../../constants';\nimport { FilteredSnaps } from '../../../features';\nimport { Order } from '../../../features/filter/constants';\nimport { NotificationAcknowledger } from '../../../features/notifications/components';\nimport { getLinkText, type Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const i18n = useLingui();\n\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    category,\n  } = data.snap;\n\n  return (\n    <Container\n      maxWidth=\"container.xl\"\n      paddingTop=\"0\"\n      marginTop={{ base: 4, md: 20 }}\n    >\n      <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n      <Box>\n        <Flex\n          justifyContent=\"space-between\"\n          flexDirection={{ base: 'column', md: 'row' }}\n          alignItems=\"center\"\n        >\n          <SnapAuthorship name={name} icon={icon} snapId={snapId} />\n          <Flex\n            alignItems=\"center\"\n            flexDirection={{ base: 'column', md: 'row' }}\n            marginTop={{ base: 4, md: 0 }}\n            width={{ base: '100%', md: 'auto' }}\n            gap={{ base: 4, md: 4 }}\n          >\n            {website && (\n              <SnapWebsiteButton\n                snapId={snapId}\n                website={website}\n                onboard={onboard}\n              />\n            )}\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n          </Flex>\n        </Flex>\n        <Divider my=\"6\" />\n        <Flex\n          justifyContent={{ base: 'center', md: 'space-between' }}\n          flexDirection={{ base: 'column', md: 'row' }}\n          flexWrap={{ base: 'nowrap', md: 'wrap', lg: 'nowrap' }}\n          rowGap={{ base: 4, lg: 0 }}\n        >\n          {data.snap.category && (\n            <SnapData\n              order={{ base: 1, md: 1 }}\n              label={t`Category`}\n              value={\n                <SnapCategory\n                  category={data.snap.category as RegistrySnapCategory}\n                />\n              }\n            />\n          )}\n          <SnapData\n            order={{ base: 8, md: 2 }}\n            label={t`Version`}\n            value={latestVersion}\n          />\n          {data.snap.author && (\n            <SnapData\n              order={{ base: 2, md: 3 }}\n              label={t`Developer`}\n              value={\n                <ExternalLink href={data.snap.author.website}>\n                  {data.snap.author.name}\n                </ExternalLink>\n              }\n            />\n          )}\n          {\n            // An empty Box taking full width will divide elements in two rows\n            // only on medium size screens while keeping the full flex\n            // system for every screen.\n          }\n          <Box\n            order={{ base: 1, md: 4 }}\n            display={{ base: 'none', md: 'flex', lg: 'none' }}\n            flexBasis=\"100%\"\n            height={0}\n          />\n          {\n            // On mobile screens description is displayed in the middle\n            // of the Snap's metadata\n          }\n          <Divider\n            my=\"2\"\n            display={{ base: 'flex', md: 'none' }}\n            order={{ base: 4, md: 5 }}\n          />\n          <Text\n            display={{ base: 'block', md: 'none' }}\n            order={{ base: 5, md: 6 }}\n            color=\"text.alternative\"\n            textTransform=\"uppercase\"\n            fontWeight=\"medium\"\n            fontSize=\"sm\"\n          >\n            <Trans>\n              Description by{' '}\n              <Text\n                as=\"span\"\n                color=\"text.default\"\n                textTransform=\"uppercase\"\n                fontWeight=\"medium\"\n                fontSize=\"sm\"\n              >\n                {name}\n              </Text>\n            </Trans>\n          </Text>\n          <SnapDescription\n            order={{ base: 6, md: 7 }}\n            description={description}\n            mt=\"1\"\n            whiteSpace=\"pre-wrap\"\n            display={{ base: 'block', md: 'none' }}\n          />\n          <Divider\n            my=\"2\"\n            display={{ base: 'flex', md: 'none' }}\n            order={{ base: 7, md: 8 }}\n          />\n          {data.snap.sourceCode && (\n            <SnapData\n              order={{ base: 9, md: 9 }}\n              label={t`Source Code`}\n              value={<SnapSourceCode url={data.snap.sourceCode} />}\n            />\n          )}\n          {data.snap.audits && (\n            <SnapData\n              order={{ base: 10, md: 10 }}\n              label={t`Audit`}\n              value={\n                <SnapAudits\n                  audits={\n                    data.snap.audits as Fields<\n                      Queries.SnapAudits,\n                      'auditor' | 'report'\n                    >[]\n                  }\n                />\n              }\n            />\n          )}\n          {(data.snap.support?.contact ||\n            data.snap.support?.faq ||\n            data.snap.support?.knowledgeBase) && (\n            <SnapData\n              order={{ base: 3, md: 11 }}\n              label={t`Support`}\n              value={\n                <>\n                  {data.snap.support.contact && (\n                    <ExternalLink href={data.snap.support.contact}>\n                      {getLinkText(data.snap.support.contact, t`Contact`)}\n                    </ExternalLink>\n                  )}\n                  {data.snap.support.faq && (\n                    <ExternalLink href={data.snap.support.faq}>\n                      <Trans>FAQ</Trans>\n                    </ExternalLink>\n                  )}\n                  {data.snap.support.knowledgeBase && (\n                    <ExternalLink href={data.snap.support.knowledgeBase}>\n                      <Trans>Knowledge Base</Trans>\n                    </ExternalLink>\n                  )}\n                </>\n              }\n            />\n          )}\n        </Flex>\n        <Divider my=\"6\" display={{ base: 'none', md: 'flex' }} />\n        <Text\n          display={{ base: 'none', md: 'block' }}\n          color=\"text.alternative\"\n          textTransform=\"uppercase\"\n          fontWeight=\"medium\"\n          fontSize=\"sm\"\n        >\n          <Trans>\n            Description by{' '}\n            <Text\n              as=\"span\"\n              color=\"text.default\"\n              textTransform=\"uppercase\"\n              fontWeight=\"medium\"\n              fontSize=\"sm\"\n            >\n              {name}\n            </Text>\n          </Trans>\n        </Text>\n        <SnapDescription\n          display={{ base: 'none', md: 'block' }}\n          description={description}\n          marginTop=\"2\"\n          whiteSpace=\"pre-wrap\"\n        />\n      </Box>\n\n      {category && (\n        <>\n          <Divider my=\"12\" />\n          <Flex\n            width=\"100%\"\n            marginBottom=\"4\"\n            flexDirection=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Heading as=\"h2\" fontSize=\"2xl\">\n              <Trans>Related Snaps</Trans>\n            </Heading>\n            <Link\n              as={GatsbyLink}\n              to={SNAP_CATEGORY_LINKS[category as RegistrySnapCategory].link}\n              variant=\"landing\"\n            >\n              {i18n._(\n                SNAP_CATEGORY_LINKS[category as RegistrySnapCategory].linkText,\n              )}\n            </Link>\n          </Flex>\n          <FilteredSnaps\n            limit={3}\n            category={category as RegistrySnapCategory}\n            order={Order.Random}\n            excluded={[snapId]}\n            images={true}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n","'use client'\n\n// src/divider.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Divider = forwardRef(function Divider2(props, ref) {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props);\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props);\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\"\n    },\n    horizontal: {\n      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\"\n    }\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.hr,\n    {\n      ref,\n      \"aria-orientation\": orientation,\n      ...rest,\n      __css: {\n        ...styles,\n        border: \"0\",\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css\n      },\n      className: cx(\"chakra-divider\", className)\n    }\n  );\n});\nDivider.displayName = \"Divider\";\n\nexport {\n  Divider\n};\n//# sourceMappingURL=chunk-W7WUSNWJ.mjs.map"],"names":["Head","_ref2","data","title","snap","name","description","image","site","siteMetadata","siteUrl","banner","publicURL","_jsxs","_Fragment","children","_jsx","lang","content","property","author","_ref","_data$snap$support","_data$snap$support2","_data$snap$support3","i18n","useLingui","snapId","icon","website","onboard","latestVersion","category","Container","maxWidth","paddingTop","marginTop","base","md","NotificationAcknowledger","version","Box","Flex","justifyContent","flexDirection","alignItems","SnapAuthorship","width","gap","SnapWebsiteButton","InstallSnapButton","Divider","my","flexWrap","lg","rowGap","SnapData","order","label","_","id","value","SnapCategory","ExternalLink","href","display","flexBasis","height","Text","color","textTransform","fontWeight","fontSize","Trans","values","components","as","SnapDescription","mt","whiteSpace","sourceCode","SnapSourceCode","url","audits","SnapAudits","support","contact","faq","knowledgeBase","getLinkText","marginBottom","Heading","Link","GatsbyLink","to","SNAP_CATEGORY_LINKS","link","variant","linkText","FilteredSnaps","limit","Order","Random","excluded","images","props","ref","borderLeftWidth","borderBottomWidth","borderTopWidth","borderRightWidth","borderWidth","borderStyle","borderColor","styles","className","orientation","__css","rest","dividerStyles","vertical","horizontal","jsx","hr","border","cx","displayName"],"sourceRoot":""}